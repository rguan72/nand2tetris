// bootstrap
    @261
    D=A
    @SP
    M=D
    @Sys.init
    0;JMP
// function Main.fibonacci 0
(Main.fibonacci)
    @0
    D=A
(Main.fibonacci$internalLabel$loop)
    @Main.fibonacci$internalLabel$end
    D;JEQ
    @SP
    A=M
    M=0
    @SP
    M=M+1
    D=D-1
    @Main.fibonacci$internalLabel$loop
    0;JMP
(Main.fibonacci$internalLabel$end)
// push argument 0
    @ARG
    D=M
    @0
    A=D+A
    D=M
    @SP
    A=M
    M=D
    @SP
    M=M+1
// push constant 2
    @2
    D=A
    @SP
    A=M
    M=D
    @SP
    M=M+1
// lt
    @SP
    M=M-1
    A=M
    D=M
    @SP
    A=M-1
    D=M-D
    M=-1
    @LT3
    D;JLT
    @SP
    A=M-1
    M=0
(LT3)
// if-goto IF_TRUE
    @SP
    M=M-1
    A=M
    D=M
    @Main.Main.fibonacci$IF_TRUE
    D;JNE
// goto IF_FALSE
    @Main.Main.fibonacci$IF_FALSE
    0;JMP
(Main.Main.fibonacci$IF_TRUE)
// push argument 0
    @ARG
    D=M
    @0
    A=D+A
    D=M
    @SP
    A=M
    M=D
    @SP
    M=M+1
// return
    @LCL
    D=M
    @R13
    M=D
    @SP
    A=M-1
    D=M
    @ARG
    A=M
    M=D
    @ARG
    D=M+1
    @SP
    M=D
    @LCL
    A=M-1
    D=M
    @THAT
    M=D
    @LCL
    D=M
    @2
    D=D-A
    A=D
    D=M
    @THIS
    M=D
    @LCL
    D=M
    @3
    D=D-A
    A=D
    D=M
    @ARG
    M=D
    @LCL
    D=M
    @4
    D=D-A
    A=D
    D=M
    @LCL
    M=D
    @R13
    D=M
    @5
    D=D-A
    A=D
    A=M
    0;JMP
(Main.Main.fibonacci$IF_FALSE)
// push argument 0
    @ARG
    D=M
    @0
    A=D+A
    D=M
    @SP
    A=M
    M=D
    @SP
    M=M+1
// push constant 2
    @2
    D=A
    @SP
    A=M
    M=D
    @SP
    M=M+1
// sub
    @SP
    M=M-1
    A=M
    D=M
    @SP
    A=M-1
    M=M-D
// call Main.fibonacci 1
    @Main.fibonacci$ret.13
    D=A
    @SP
    A=M
    M=D
    @SP
    M=M+1
    @LCL
    D=M
    @SP
    A=M
    M=D
    @SP
    M=M+1
    @ARG
    D=M
    @SP
    A=M
    M=D
    @SP
    M=M+1
    @THIS
    D=M
    @SP
    A=M
    M=D
    @SP
    M=M+1
    @THAT
    D=M
    @SP
    A=M
    M=D
    @SP
    M=M+1
    @SP
    D=M
    @5
    D=D-A
    @1
    D=D-A
    @ARG
    M=D
    @SP
    D=M
    @LCL
    M=D
    @Main.fibonacci
    0;JMP
(Main.fibonacci$ret.13)
// push argument 0
    @ARG
    D=M
    @0
    A=D+A
    D=M
    @SP
    A=M
    M=D
    @SP
    M=M+1
// push constant 1
    @1
    D=A
    @SP
    A=M
    M=D
    @SP
    M=M+1
// sub
    @SP
    M=M-1
    A=M
    D=M
    @SP
    A=M-1
    M=M-D
// call Main.fibonacci 1
    @Main.fibonacci$ret.17
    D=A
    @SP
    A=M
    M=D
    @SP
    M=M+1
    @LCL
    D=M
    @SP
    A=M
    M=D
    @SP
    M=M+1
    @ARG
    D=M
    @SP
    A=M
    M=D
    @SP
    M=M+1
    @THIS
    D=M
    @SP
    A=M
    M=D
    @SP
    M=M+1
    @THAT
    D=M
    @SP
    A=M
    M=D
    @SP
    M=M+1
    @SP
    D=M
    @5
    D=D-A
    @1
    D=D-A
    @ARG
    M=D
    @SP
    D=M
    @LCL
    M=D
    @Main.fibonacci
    0;JMP
(Main.fibonacci$ret.17)
// add
    @SP
    M=M-1
    A=M
    D=M
    @SP
    A=M-1
    M=M+D
// return
    @LCL
    D=M
    @R13
    M=D
    @SP
    A=M-1
    D=M
    @ARG
    A=M
    M=D
    @ARG
    D=M+1
    @SP
    M=D
    @LCL
    A=M-1
    D=M
    @THAT
    M=D
    @LCL
    D=M
    @2
    D=D-A
    A=D
    D=M
    @THIS
    M=D
    @LCL
    D=M
    @3
    D=D-A
    A=D
    D=M
    @ARG
    M=D
    @LCL
    D=M
    @4
    D=D-A
    A=D
    D=M
    @LCL
    M=D
    @R13
    D=M
    @5
    D=D-A
    A=D
    A=M
    0;JMP
// function Sys.init 0
(Sys.init)
    @0
    D=A
(Sys.init$internalLabel$loop)
    @Sys.init$internalLabel$end
    D;JEQ
    @SP
    A=M
    M=0
    @SP
    M=M+1
    D=D-1
    @Sys.init$internalLabel$loop
    0;JMP
(Sys.init$internalLabel$end)
// push constant 4
    @4
    D=A
    @SP
    A=M
    M=D
    @SP
    M=M+1
// call Main.fibonacci 1
    @Main.fibonacci$ret.2
    D=A
    @SP
    A=M
    M=D
    @SP
    M=M+1
    @LCL
    D=M
    @SP
    A=M
    M=D
    @SP
    M=M+1
    @ARG
    D=M
    @SP
    A=M
    M=D
    @SP
    M=M+1
    @THIS
    D=M
    @SP
    A=M
    M=D
    @SP
    M=M+1
    @THAT
    D=M
    @SP
    A=M
    M=D
    @SP
    M=M+1
    @SP
    D=M
    @5
    D=D-A
    @1
    D=D-A
    @ARG
    M=D
    @SP
    D=M
    @LCL
    M=D
    @Main.fibonacci
    0;JMP
(Main.fibonacci$ret.2)
(Sys.Sys.init$WHILE)
// goto WHILE
    @Sys.Sys.init$WHILE
    0;JMP
